name: train-daily

permissions:
  contents: write  # needed for the auto-commit step

on:
  schedule:
    - cron: "0 19 * * *"   # 19:00 UTC (== 00:00 PKT next day). Change if you want a different local time.
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install project deps
        run: pip install -r requirements.txt

      - name: Train (multi-horizon)
        run: python src/train.py

      # --- NEW: Sync winners into models/latest for Streamlit ---
      - name: Sync models/latest directory
        shell: bash
        run: |
          set -euo pipefail

          echo "=== MODELS TREE (before sync) ==="
          ls -R models || true

          mkdir -p models/latest
          rm -f models/latest/* || true

          # Find the newest produced joblib (any horizon) and use its folder as src.
          newest_joblib="$(find models -type f -name '*tplus*.joblib' -printf '%T@ %p\n' \
                            | sort -n | tail -n1 | cut -d' ' -f2- || true)"
          if [ -n "${newest_joblib}" ]; then
            src_dir="$(dirname "${newest_joblib}")"
          else
            # Fallback: maybe train.py wrote directly to models/
            src_dir="models"
          fi

          echo "Using source directory: ${src_dir}"

          # Copy horizons if present (no-fail when none match)
          find "${src_dir}" -maxdepth 1 -name '*tplus24.joblib' -exec cp -t models/latest {} + || true
          find "${src_dir}" -maxdepth 1 -name '*tplus48.joblib' -exec cp -t models/latest {} + || true
          find "${src_dir}" -maxdepth 1 -name '*tplus72.joblib' -exec cp -t models/latest {} + || true

          # Copy metadata (prefer src_dir; if missing, look in models root)
          if [ -f "${src_dir}/features.json" ]; then
            cp "${src_dir}/features.json" models/latest/
          elif [ -f "models/features.json" ]; then
            cp "models/features.json" models/latest/
          fi

          if [ -f "${src_dir}/report.json" ]; then
            cp "${src_dir}/report.json" models/latest/
          elif [ -f "models/report.json" ]; then
            cp "models/report.json" models/latest/
          fi

          echo "=== models/latest content ==="
          ls -l models/latest || true


      - name: Commit models/latest back to repo
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(models): refresh models/latest from train-daily"

      - name: Set Hopsworks presence flag
        shell: bash
        run: |
          if [ -n "${{ secrets.HOPSWORKS_PROJECT }}" ] && [ -n "${{ secrets.HOPSWORKS_API_KEY }}" ]; then
            echo "HAVE_HOPSWORKS=true" >> "$GITHUB_ENV"
          else
            echo "HAVE_HOPSWORKS=false" >> "$GITHUB_ENV"
          fi
      
      # --- (Optional) Push engineered features to Hopsworks Feature Store ---
      - name: Push features to Hopsworks
        if: ${{ env.HAVE_HOPSWORKS == 'true' }}
        env:
          HOPSWORKS_PROJECT: ${{ secrets.HOPSWORKS_PROJECT }}
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          pip install "hopsworks"
          python src/push_features_hopsworks.py

      # --- (Optional) Register 24/48/72h models in Hopsworks Model Registry ---
      - name: Register models to Hopsworks
        if: ${{ env.HAVE_HOPSWORKS == 'true' }}
        env:
          HOPSWORKS_PROJECT: ${{ secrets.HOPSWORKS_PROJECT }}
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          pip install "hopsworks"
          python src/register_hopsworks.py

      - uses: actions/upload-artifact@v4
        with:
          name: models
          path: models/
